// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "desafio/models"

	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// InsertGpsData provides a mock function with given fields: data
func (_m *IRepository) InsertGpsData(data models.GpsRequest) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for InsertGpsData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.GpsRequest) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertGyroscopeData provides a mock function with given fields: data
func (_m *IRepository) InsertGyroscopeData(data models.GyroscopeRequest) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for InsertGyroscopeData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.GyroscopeRequest) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertPhotoData provides a mock function with given fields: data
func (_m *IRepository) InsertPhotoData(data models.PhotoRequest) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for InsertPhotoData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.PhotoRequest) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
